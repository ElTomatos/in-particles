{"id":"shaders/particle.vert","dependencies":[{"name":"C:\\Users\\helld\\Documents\\develop\\in-particles\\node_modules\\glsl-noise\\simplex\\2d.glsl","includedInParent":true,"mtime":1380245600000},{"name":"C:\\Users\\helld\\Documents\\develop\\in-particles\\package.json","includedInParent":true,"mtime":1593868552385}],"generated":{"js":"module.exports = \"// @author brunoimbrizi / http://brunoimbrizi.com\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nattribute float pindex;\\nattribute vec3 position;\\nattribute vec3 offset;\\nattribute vec2 uv;\\nattribute float angle;\\n\\nuniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\n\\nuniform float uTime;\\nuniform float uRandom;\\nuniform float uDepth;\\nuniform float uSize;\\nuniform vec2 uTextureSize;\\nuniform sampler2D uTexture;\\nuniform sampler2D uTouch;\\n\\nvarying vec2 vPUv;\\nvarying vec2 vUv;\\n\\n//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute(vec3 x) {\\n  return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289(i); // Avoid truncation effects in permutation\\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\nfloat random(float n) {\\n\\treturn fract(sin(n) * 43758.5453123);\\n}\\n\\nvoid main() {\\n\\tvUv = uv;\\n\\n\\t// particle uv\\n\\tvec2 puv = offset.xy / uTextureSize;\\n\\tvPUv = puv;\\n\\n\\t// pixel color\\n\\tvec4 colA = texture2D(uTexture, puv);\\n\\tfloat grey = colA.r * 0.21 + colA.g * 0.71 + colA.b * 0.07;\\n\\n\\t// displacement\\n\\tvec3 displaced = offset;\\n\\t// randomise\\n\\tdisplaced.xy += vec2(random(pindex) - 0.5, random(offset.x + pindex) - 0.5) * uRandom;\\n\\tfloat rndz = (random(pindex) + snoise_1_2(vec2(pindex * 0.1, uTime * 0.1)));\\n\\tdisplaced.z += rndz * (random(pindex) * 2.0 * uDepth);\\n\\t// center\\n\\tdisplaced.xy -= uTextureSize * 0.5;\\n\\n\\t// touch\\n\\tfloat t = texture2D(uTouch, puv).r;\\n\\tdisplaced.z += t * 20.0 * rndz;\\n\\tdisplaced.x += cos(angle) * t * 20.0 * rndz;\\n\\tdisplaced.y += sin(angle) * t * 20.0 * rndz;\\n\\n\\t// particle size\\n\\tfloat psize = (snoise_1_2(vec2(uTime, pindex) * 0.5) + 2.0);\\n\\tpsize *= max(grey, 0.2);\\n\\tpsize *= uSize;\\n\\n\\t// final position\\n\\tvec4 mvPosition = modelViewMatrix * vec4(displaced, 1.0);\\n\\tmvPosition.xyz += position * psize;\\n\\tvec4 finalPosition = projectionMatrix * mvPosition;\\n\\n\\tgl_Position = finalPosition;\\n}\\n\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"shaders/particle.vert","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"shaders/particle.vert","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"shaders/particle.vert","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"shaders/particle.vert","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"shaders/particle.vert","original":{"line":1,"column":15}},{"generated":{"line":1,"column":3874},"source":"shaders/particle.vert","original":{"line":1,"column":0}}],"sources":{"shaders/particle.vert":"module.exports=\"// @author brunoimbrizi / http://brunoimbrizi.com\\n\\nprecision highp float;\\n#define GLSLIFY 1\\n\\nattribute float pindex;\\nattribute vec3 position;\\nattribute vec3 offset;\\nattribute vec2 uv;\\nattribute float angle;\\n\\nuniform mat4 modelViewMatrix;\\nuniform mat4 projectionMatrix;\\n\\nuniform float uTime;\\nuniform float uRandom;\\nuniform float uDepth;\\nuniform float uSize;\\nuniform vec2 uTextureSize;\\nuniform sampler2D uTexture;\\nuniform sampler2D uTouch;\\n\\nvarying vec2 vPUv;\\nvarying vec2 vUv;\\n\\n//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute(vec3 x) {\\n  return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289(i); // Avoid truncation effects in permutation\\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\nfloat random(float n) {\\n\\treturn fract(sin(n) * 43758.5453123);\\n}\\n\\nvoid main() {\\n\\tvUv = uv;\\n\\n\\t// particle uv\\n\\tvec2 puv = offset.xy / uTextureSize;\\n\\tvPUv = puv;\\n\\n\\t// pixel color\\n\\tvec4 colA = texture2D(uTexture, puv);\\n\\tfloat grey = colA.r * 0.21 + colA.g * 0.71 + colA.b * 0.07;\\n\\n\\t// displacement\\n\\tvec3 displaced = offset;\\n\\t// randomise\\n\\tdisplaced.xy += vec2(random(pindex) - 0.5, random(offset.x + pindex) - 0.5) * uRandom;\\n\\tfloat rndz = (random(pindex) + snoise_1_2(vec2(pindex * 0.1, uTime * 0.1)));\\n\\tdisplaced.z += rndz * (random(pindex) * 2.0 * uDepth);\\n\\t// center\\n\\tdisplaced.xy -= uTextureSize * 0.5;\\n\\n\\t// touch\\n\\tfloat t = texture2D(uTouch, puv).r;\\n\\tdisplaced.z += t * 20.0 * rndz;\\n\\tdisplaced.x += cos(angle) * t * 20.0 * rndz;\\n\\tdisplaced.y += sin(angle) * t * 20.0 * rndz;\\n\\n\\t// particle size\\n\\tfloat psize = (snoise_1_2(vec2(uTime, pindex) * 0.5) + 2.0);\\n\\tpsize *= max(grey, 0.2);\\n\\tpsize *= uSize;\\n\\n\\t// final position\\n\\tvec4 mvPosition = modelViewMatrix * vec4(displaced, 1.0);\\n\\tmvPosition.xyz += position * psize;\\n\\tvec4 finalPosition = projectionMatrix * mvPosition;\\n\\n\\tgl_Position = finalPosition;\\n}\\n\";"},"lineCount":null}},"error":null,"hash":"1297e8c59ec9c32d9a299d18737b7e36","cacheData":{"env":{}}}